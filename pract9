/*In any language program mostly syntax error occurs due to unbalancing delimiter such as
(),{},[]. Write C++ program using stack to check whether given expression is well
parenthesized or not*/

#include <iostream>
#include <stack>
#include <string>

using namespace std;

bool isWellParenthesized(const string& expression) {
    stack<char> stack;

    for (size_t i = 0; i < expression.size(); ++i) {
        char currentChar = expression[i];

        if (currentChar == '(' || currentChar == '[' || currentChar == '{') {
            stack.push(currentChar);
        } else if (currentChar == ')' || currentChar == ']' || currentChar == '}') {
            if (stack.empty()) {
                return false; // Closing delimiter without a corresponding opening delimiter
            }

            char top = stack.top();
            stack.pop();

            if ((currentChar == ')' && top != '(') ||
                (currentChar == ']' && top != '[') ||
                (currentChar == '}' && top != '{')) {
                return false; // Mismatched opening and closing delimiters
            }
        }
    }

    return stack.empty(); // Expression is well-parenthesized if the stack is empty at the end
}

int main() {
    string expression;

    // Input expression from the user
    cout << "Enter an expression: ";
    getline(cin, expression);

    // Check if the expression is well-parenthesized
    if (isWellParenthesized(expression)) {
        cout << "The expression is well-parenthesized." << endl;
    } else {
        cout << "The expression is not well-parenthesized." << endl;
    }

    return 0;
}
