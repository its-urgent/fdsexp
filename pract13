/*Pizza parlor accepting maximum M orders. Orders are served in first come first served
basis. Order once placed cannot be cancelled. Write C++ program to simulate the system
using circular queue using array.*/

#include <iostream>

using namespace std;

const int MAX_ORDERS = 5; // Maximum number of orders

class CircularQueue {
private:
    int front, rear;
    int orders[MAX_ORDERS];

public:
    // Constructor
    CircularQueue() : front(-1), rear(-1) {}

    // Function to check if the queue is empty
    bool isEmpty() {
        return front == -1 && rear == -1;
    }

    // Function to check if the queue is full
    bool isFull() {
        return (rear + 1) % MAX_ORDERS == front;
    }

    // Function to place an order
    void placeOrder(int orderNumber) {
        if (isFull()) {
            cout << "Queue is full. Cannot place more orders.\n";
            return;
        }

        if (isEmpty()) {
            front = rear = 0;
        } else {
            rear = (rear + 1) % MAX_ORDERS;
        }

        orders[rear] = orderNumber;
        cout << "Order " << orderNumber << " placed successfully.\n";
    }

    // Function to serve an order
    void serveOrder() {
        if (isEmpty()) {
            cout << "Queue is empty. No orders to serve.\n";
            return;
        }

        cout << "Order " << orders[front] << " served.\n";

        if (front == rear) {
            front = rear = -1; // Reset to an empty queue
        } else {
            front = (front + 1) % MAX_ORDERS;
        }
    }

    // Function to display the orders in the queue
    void displayOrders() {
        if (isEmpty()) {
            cout << "Queue is empty.\n";
        } else {
            cout << "Orders in the queue: ";
            int i = front;
            do {
                cout << orders[i] << " ";
                i = (i + 1) % MAX_ORDERS;
            } while (i != (rear + 1) % MAX_ORDERS);
            cout << endl;
        }
    }
};

int main() {
    CircularQueue pizzaQueue;

    int choice, orderNumber;

    do {
        cout << "\nMenu:\n";
        cout << "1. Place Order\n";
        cout << "2. Serve Order\n";
        cout << "3. Display Orders\n";
        cout << "4. Exit\n";
        cout << "Enter your choice: ";
        cin >> choice;

        switch (choice) {
            case 1:
                cout << "Enter the order number: ";
                cin >> orderNumber;
                pizzaQueue.placeOrder(orderNumber);
                break;

            case 2:
                pizzaQueue.serveOrder();
                break;

            case 3:
                pizzaQueue.displayOrders();
                break;

            case 4:
                cout << "Exiting program.\n";
                break;

            default:
                cout << "Invalid choice. Please enter a valid option.\n";
        }

    } while (choice != 4);

    return 0;
}
