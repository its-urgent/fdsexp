/*Write C++ program for storing binary number using doubly linked lists. Write functionsa) To compute 1‘s and 2‘s complement
b) Add two binary numbers*/



#include <iostream>
#include <string>
using namespace std;

// Node structure for doubly linked list
struct Node {
    int data;
    Node* next;
    Node* prev;

    Node(int val) : data(val), next(0), prev(0) {}
};

// Function to insert a binary digit into the doubly linked list
void insert(Node*& head, int digit) {
    Node* newNode = new Node(digit);
    if (head == 0) {
        head = newNode;
    } else {
        Node* temp = head;
        while (temp->next != 0) {
            temp = temp->next;
        }
        temp->next = newNode;
        newNode->prev = temp;
    }
}

// Function to display a binary number stored in the doubly linked list
void display(Node* head) {
    while (head != 0) {
        cout << head->data;
        head = head->next;
    }
    cout << endl;
}

// Function to compute 1's complement
void onesComplement(Node* head) {
    while (head != 0) {
        head->data = 1 - head->data;
        head = head->next;
    }
}

// Function to compute 2's complement
void twosComplement(Node*& head) {
    // Reverse the bits
    Node* prev = 0;
    Node* current = head;
    Node* next = 0;

    while (current != 0) {
        next = current->next;
        current->next = prev;
        current->prev = next;
        prev = current;
        current = next;
    }

    head = prev;  // Update the head to the new reversed list

    // Add 1 to the reversed bits
    int carry = 1;
    Node* temp = 0;

    while (head != 0) {
        int sum = head->data + carry;
        head->data = sum % 2;
        carry = sum / 2;

        temp = head;
        head = head->prev;
    }

    // If there is a carry left, create a new node
    if (carry > 0) {
        insert(temp, carry);
    }
}

// Function to add two binary numbers
Node* addBinary(Node* num1, Node* num2) {
    Node* result = 0;
    int carry = 0;

    while (num1 != 0 || num2 != 0) {
        int sum = carry;
        if (num1 != 0) {
            sum += num1->data;
            num1 = num1->next;
        }
        if (num2 != 0) {
            sum += num2->data;
            num2 = num2->next;
        }

        carry = sum / 2;
        sum = sum % 2;

        insert(result, sum);
    }

    // If there is a carry left, create a new node
    if (carry > 0) {
        insert(result, carry);
    }

    return result;
}

// Function to free memory allocated for the linked list
void freeMemory(Node*& head) {
    while (head != 0) {
        Node* temp = head;
        head = head->next;
        delete temp;
    }
}

int main() {
    Node* binaryNum1 = 0;
    Node* binaryNum2 = 0;

    // Input first binary number
    string num1;
    cout << "Enter the first binary number: ";
    cin >> num1;
    for (size_t i = 0; i < num1.size(); ++i) {
        insert(binaryNum1, num1[i] - '0'); // Convert char to int
    }

    // Input second binary number
    string num2;
    cout << "Enter the second binary number: ";
    cin >> num2;
    for (size_t i = 0; i < num2.size(); ++i) {
        insert(binaryNum2, num2[i] - '0'); // Convert char to int
    }

    // Display the input binary numbers
    cout << "First binary number: ";
    display(binaryNum1);
    cout << "Second binary number: ";
    display(binaryNum2);

    // Compute and display 1's complement of the first binary number
    cout << "1's complement of the first binary number: ";
    onesComplement(binaryNum1);
    display(binaryNum1);

    // Reset the first binary number for further computations
    onesComplement(binaryNum1);

    // Compute and display 2's complement of the first binary number
    cout << "2's complement of the first binary number: ";
    twosComplement(binaryNum1);
    display(binaryNum1);

    // Add two binary numbers and display the result
    Node* sum = addBinary(binaryNum1, binaryNum2);
    cout << "Sum of the binary numbers: ";
    display(sum);

    // Free memory
    freeMemory(binaryNum1);
    freeMemory(binaryNum2);
    freeMemory(sum);

    return 0;
}
